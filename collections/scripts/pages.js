var pages = [{"name":"class BucketQueue<K, V>(bucketResolver: Function<K, K>, collectionInitializer: Function<K?, MutableCollection<V>>) : IBucketQueue<K, V> ","description":"nightcrawler.collections.BucketQueue","location":"collections/nightcrawler.collections/-bucket-queue/index.html","searchKeys":["BucketQueue","class BucketQueue<K, V>(bucketResolver: Function<K, K>, collectionInitializer: Function<K?, MutableCollection<V>>) : IBucketQueue<K, V> "]},{"name":"fun <K, V> BucketQueue(bucketResolver: Function<K, K> = Function { k -> k }, collectionInitializer: Function<K?, MutableCollection<V>> = Function { mutableListOf() })","description":"nightcrawler.collections.BucketQueue.BucketQueue","location":"collections/nightcrawler.collections/-bucket-queue/-bucket-queue.html","searchKeys":["BucketQueue","fun <K, V> BucketQueue(bucketResolver: Function<K, K> = Function { k -> k }, collectionInitializer: Function<K?, MutableCollection<V>> = Function { mutableListOf() })"]},{"name":"open override fun add(key: K, element: V): Collection<V>","description":"nightcrawler.collections.BucketQueue.add","location":"collections/nightcrawler.collections/-bucket-queue/add.html","searchKeys":["add","open override fun add(key: K, element: V): Collection<V>"]},{"name":"open override fun add(key: K, element: V): Collection<V>","description":"nightcrawler.collections.ConcurrentBucketQueue.add","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/add.html","searchKeys":["add","open override fun add(key: K, element: V): Collection<V>"]},{"name":"abstract fun add(key: K, element: V): Collection<V>","description":"nightcrawler.collections.IBucketQueue.add","location":"collections/nightcrawler.collections/-i-bucket-queue/add.html","searchKeys":["add","abstract fun add(key: K, element: V): Collection<V>"]},{"name":"open override fun addAll(key: K, elements: Collection<V>): Collection<V>","description":"nightcrawler.collections.BucketQueue.addAll","location":"collections/nightcrawler.collections/-bucket-queue/add-all.html","searchKeys":["addAll","open override fun addAll(key: K, elements: Collection<V>): Collection<V>"]},{"name":"open override fun addAll(key: K, elements: Collection<V>): Collection<V>","description":"nightcrawler.collections.ConcurrentBucketQueue.addAll","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/add-all.html","searchKeys":["addAll","open override fun addAll(key: K, elements: Collection<V>): Collection<V>"]},{"name":"abstract fun addAll(key: K, elements: Collection<V>): Collection<V>","description":"nightcrawler.collections.IBucketQueue.addAll","location":"collections/nightcrawler.collections/-i-bucket-queue/add-all.html","searchKeys":["addAll","abstract fun addAll(key: K, elements: Collection<V>): Collection<V>"]},{"name":"open override val buckets: List<K>","description":"nightcrawler.collections.BucketQueue.buckets","location":"collections/nightcrawler.collections/-bucket-queue/buckets.html","searchKeys":["buckets","open override val buckets: List<K>"]},{"name":"open override val buckets: List<K>","description":"nightcrawler.collections.ConcurrentBucketQueue.buckets","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/buckets.html","searchKeys":["buckets","open override val buckets: List<K>"]},{"name":"open override val buckets: List<Instant>","description":"nightcrawler.collections.ConcurrentTimeBucketQueue.buckets","location":"collections/nightcrawler.collections/-concurrent-time-bucket-queue/buckets.html","searchKeys":["buckets","open override val buckets: List<Instant>"]},{"name":"abstract val buckets: List<K>","description":"nightcrawler.collections.IBucketQueue.buckets","location":"collections/nightcrawler.collections/-i-bucket-queue/buckets.html","searchKeys":["buckets","abstract val buckets: List<K>"]},{"name":"open override val numBuckets: Int","description":"nightcrawler.collections.BucketQueue.numBuckets","location":"collections/nightcrawler.collections/-bucket-queue/num-buckets.html","searchKeys":["numBuckets","open override val numBuckets: Int"]},{"name":"open override val numBuckets: Int","description":"nightcrawler.collections.ConcurrentBucketQueue.numBuckets","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/num-buckets.html","searchKeys":["numBuckets","open override val numBuckets: Int"]},{"name":"open override val numBuckets: Int","description":"nightcrawler.collections.ConcurrentTimeBucketQueue.numBuckets","location":"collections/nightcrawler.collections/-concurrent-time-bucket-queue/num-buckets.html","searchKeys":["numBuckets","open override val numBuckets: Int"]},{"name":"abstract val numBuckets: Int","description":"nightcrawler.collections.IBucketQueue.numBuckets","location":"collections/nightcrawler.collections/-i-bucket-queue/num-buckets.html","searchKeys":["numBuckets","abstract val numBuckets: Int"]},{"name":"open override fun pop(inclusiveKey: K): Collection<V>","description":"nightcrawler.collections.BucketQueue.pop","location":"collections/nightcrawler.collections/-bucket-queue/pop.html","searchKeys":["pop","open override fun pop(inclusiveKey: K): Collection<V>"]},{"name":"open override fun pop(inclusiveKey: K): Collection<V>","description":"nightcrawler.collections.ConcurrentBucketQueue.pop","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/pop.html","searchKeys":["pop","open override fun pop(inclusiveKey: K): Collection<V>"]},{"name":"abstract fun pop(inclusiveKey: K): Collection<V>","description":"nightcrawler.collections.IBucketQueue.pop","location":"collections/nightcrawler.collections/-i-bucket-queue/pop.html","searchKeys":["pop","abstract fun pop(inclusiveKey: K): Collection<V>"]},{"name":"open override val size: Int","description":"nightcrawler.collections.BucketQueue.size","location":"collections/nightcrawler.collections/-bucket-queue/size.html","searchKeys":["size","open override val size: Int"]},{"name":"open override val size: Int","description":"nightcrawler.collections.ConcurrentBucketQueue.size","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/size.html","searchKeys":["size","open override val size: Int"]},{"name":"open override val size: Int","description":"nightcrawler.collections.ConcurrentTimeBucketQueue.size","location":"collections/nightcrawler.collections/-concurrent-time-bucket-queue/size.html","searchKeys":["size","open override val size: Int"]},{"name":"abstract val size: Int","description":"nightcrawler.collections.IBucketQueue.size","location":"collections/nightcrawler.collections/-i-bucket-queue/size.html","searchKeys":["size","abstract val size: Int"]},{"name":"class ConcurrentBucketQueue<K, V>(delegate: IBucketQueue<K, V>) : IBucketQueue<K, V> ","description":"nightcrawler.collections.ConcurrentBucketQueue","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/index.html","searchKeys":["ConcurrentBucketQueue","class ConcurrentBucketQueue<K, V>(delegate: IBucketQueue<K, V>) : IBucketQueue<K, V> "]},{"name":"fun <K, V> ConcurrentBucketQueue(delegate: IBucketQueue<K, V> = BucketQueue())","description":"nightcrawler.collections.ConcurrentBucketQueue.ConcurrentBucketQueue","location":"collections/nightcrawler.collections/-concurrent-bucket-queue/-concurrent-bucket-queue.html","searchKeys":["ConcurrentBucketQueue","fun <K, V> ConcurrentBucketQueue(delegate: IBucketQueue<K, V> = BucketQueue())"]},{"name":"class ConcurrentTimeBucketQueue<T>(resolutionMs: Long, collectionInitializer: Function<Instant?, MutableCollection<T>>, bucketResolver: Function<Instant, Instant>, delegate: IBucketQueue<Instant, T>) : IBucketQueue<Instant, T> ","description":"nightcrawler.collections.ConcurrentTimeBucketQueue","location":"collections/nightcrawler.collections/-concurrent-time-bucket-queue/index.html","searchKeys":["ConcurrentTimeBucketQueue","class ConcurrentTimeBucketQueue<T>(resolutionMs: Long, collectionInitializer: Function<Instant?, MutableCollection<T>>, bucketResolver: Function<Instant, Instant>, delegate: IBucketQueue<Instant, T>) : IBucketQueue<Instant, T> "]},{"name":"fun <T> ConcurrentTimeBucketQueue(resolutionMs: Long, collectionInitializer: Function<Instant?, MutableCollection<T>> = Function { mutableListOf() }, bucketResolver: Function<Instant, Instant> = Function { instant ->\n        Instant.ofEpochMilli(instant.toEpochMilli() / resolutionMs * resolutionMs)\n    }, delegate: IBucketQueue<Instant, T> = ConcurrentBucketQueue(\n        BucketQueue(\n            bucketResolver,\n            collectionInitializer\n        )\n    ))","description":"nightcrawler.collections.ConcurrentTimeBucketQueue.ConcurrentTimeBucketQueue","location":"collections/nightcrawler.collections/-concurrent-time-bucket-queue/-concurrent-time-bucket-queue.html","searchKeys":["ConcurrentTimeBucketQueue","fun <T> ConcurrentTimeBucketQueue(resolutionMs: Long, collectionInitializer: Function<Instant?, MutableCollection<T>> = Function { mutableListOf() }, bucketResolver: Function<Instant, Instant> = Function { instant ->\n        Instant.ofEpochMilli(instant.toEpochMilli() / resolutionMs * resolutionMs)\n    }, delegate: IBucketQueue<Instant, T> = ConcurrentBucketQueue(\n        BucketQueue(\n            bucketResolver,\n            collectionInitializer\n        )\n    ))"]},{"name":"interface IBucketQueue<K, V>","description":"nightcrawler.collections.IBucketQueue","location":"collections/nightcrawler.collections/-i-bucket-queue/index.html","searchKeys":["IBucketQueue","interface IBucketQueue<K, V>"]}]
